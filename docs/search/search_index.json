{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Jdbase-client Documentation","text":""},{"location":"#overview","title":"Overview","text":"<p><code>jdbase-client</code> is a Python library designed to provide a convenient interface for interacting with JDBase remote database via an HTTP API. It simplifies common database operations such as creating, reading, updating, and deleting records, as well as performing custom queries. This library assumes that a compatible server is running and accessible at the provided API endpoint.</p>"},{"location":"#installation","title":"Installation","text":"<p>You can install <code>jdbase-client</code> via pip:</p> <pre><code>pip install jdbase-client\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>To use <code>jdbase-client</code>, you need to instantiate a <code>Database</code> object with the necessary configuration. This configuration includes the API key, API endpoint, and the name of the database. Once instantiated, you can use this object to perform various database operations.</p>"},{"location":"#example","title":"Example","text":"<pre><code>from jdbase_client import Database\n\n# Configuration settings\nconfig = {\n    'api_key': 'adminkey',\n    'api_endpoint': 'http://127.0.0.1:5000/api',\n    'db': 'db2'\n}\n\n# Instantiate the Database object\ndb = Database(config)\n\n# Example usage: Matching records\nmatching_records = db.match({\"id\": 2, \"age\": 30})\nprint(matching_records)\n</code></pre>"},{"location":"#class-database","title":"Class: <code>Database</code>","text":""},{"location":"#methods","title":"Methods","text":""},{"location":"#createquery-dict-dict","title":"<code>create(query: dict) -&gt; dict</code>","text":"<p>Creates a new record in the database.</p> <ul> <li><code>query</code>: A dictionary representing the data to be inserted.</li> </ul> <p>Example:</p> <pre><code>db.create({\n    \"name\":\"Rakib Hossain\",\n    \"age\":22,\"skill\":\"python\"\n    })\n</code></pre> <p>Returns: A dictionary containing the result of the operation.</p>"},{"location":"#get_byquery-dict-dict","title":"<code>get_by(query: dict) -&gt; dict</code>","text":"<p>Retrieves records from the database based on the provided query.</p> <ul> <li> <p><code>query</code>: A dictionary representing the query parameters. Example:</p> <p>db.get_by({\"id: 5})</p> </li> </ul> <p>Returns: A dictionary containing the retrieved records.</p>"},{"location":"#updatequery-dict-update_query-dict-dict","title":"<code>update(query: dict, update_query: dict) -&gt; dict</code>","text":"<p>Updates records in the database based on the provided query and update query.</p> <ul> <li><code>query</code>: A dictionary representing the query to identify records to be updated.</li> <li><code>update_query</code>: A dictionary representing the update operation to be performed on matching records.</li> </ul> <p>Example:</p> <pre><code>db.update({\n    \"Skill\": \"Python\"\n},\n{\n    \"Skill\":\"Python_Api\"\n})\n</code></pre> <p>Returns: A dictionary containing the result of the operation.</p>"},{"location":"#deletequery-dict-dict","title":"<code>delete(query: dict) -&gt; dict</code>","text":"<p>Deletes records from the database based on the provided query.</p> <ul> <li><code>query</code>: A dictionary representing the query to identify records to be deleted.</li> </ul> <p>Example:</p> <pre><code>db.delete({\"skill\":\"PHP\"})\n</code></pre> <p>Returns: A dictionary containing the result of the operation.</p>"},{"location":"#matchquery-dict-dict","title":"<code>match(query: dict) -&gt; dict</code>","text":"<p>Performs a custom matching query on the database.</p> <ul> <li><code>query</code>: A dictionary representing the matching criteria.</li> </ul> <p>Example:</p> <pre><code>db.match({\"email\":\"user@jdmail.com\",\n    \"password\":\"user@password\"})\n</code></pre> <p>Returns: A dictionary containing the matching records.</p>"},{"location":"#create_dbquery-dict-dict","title":"<code>create_db(query: dict) -&gt; dict</code>","text":"<p>Creating New Database.</p> <ul> <li><code>query</code>: A dictionary representing Name of Database</li> </ul> <p>Example:</p> <pre><code>db.create_db({\"name\":\"users\"})\n</code></pre> <p>Returns: A dictionary containing the matching records.</p>"},{"location":"#conclusion","title":"Conclusion","text":"<p><code>jdbase-client</code> simplifies database interactions by providing an easy-to-use interface for common operations. By following the provided documentation, you can seamlessly integrate this library into your Python projects and interact with your JDBase remote database.</p> <p>Checkout JDBase Here</p>"}]}